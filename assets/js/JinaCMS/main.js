!function(t,e){for(var n in e)t[n]=e[n]}(this,function(t){var e={};function n(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(i,a,function(e){return t[e]}.bind(null,a));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function i(t,e){this.componentId=t.componentId,this.root=t.component,this.history=[$.extend(!0,{},t.component)],this.vue={},this.currentIndex=0,this.maxHistory=e.maxHistory,this.isDragging=!1,this.changes=0,this.currentVersion=0,this.library={},this.containers=e.containers,this.currentId=0,this.lng=e.lng,this.defaultLng=e.defaultLng,this.deleteComponent=function(t,e){e.stopImmediatePropagation(),this.doDelete(this.root,t)},this.doDelete=function(t,e){if(t.children)for(var n=0;n<t.children.length;n++){if(t.children[n]==e)return t.children.splice(n,1),!0;if(this.doDelete(t.children[n],e))return!0}},this.insertComponent=function(t,e,n,i,a){if(a&&this.generateId(n),t||(t=this.root),t.children)for(var r=0;r<t.children.length;r++){if(t.children[r]==e)return 2==i?t.children[r].children.push(n):t.children.splice(r+i,0,n),!0;if(this.insertComponent(t.children[r],e,n,i))return!0}},this.generateId=function(t){var e=this.getMaxId(this.root,0);t.id=++e,this.generateChildrenIds(t,t.id)},this.getMaxId=function(t,e){if(t||(t=this.root),Number(t.id)>Number(e)&&(e=t.id),t.children)for(var n=0;n<t.children.length;n++)e=this.getMaxId(t.children[n],e);return e},this.generateChildrenIds=function(t,e){if(t.children)for(var n=0;n<t.children.length;n++)t.children[n].id=++e,e=this.generateChildrenIds(t.children[n],e);return e},this.addComponent=function(t,e){t.children.push({id:"7",code:"type3",name:"Composant 7",className:"Jina_Field_Select",tag:"jinadbfieldselect",values:{3:"Valeur 3",4:"Valeur 4"}})},this.isTouched=function(){return this.maxHistory>0&&this.history.length>this.maxHistory+1&&(this.history.splice(0,1),this.currentIndex--),JSON.stringify(this.history[this.currentIndex])!=JSON.stringify(this.root)&&(this.history[++this.currentIndex]=$.extend(!0,{},this.root),this.history.splice(this.currentIndex+1,this.history.length-(this.currentIndex+1))),this.currentIndex>0},this.backward=function(){0!=this.currentIndex&&(this.root=$.extend(!0,{},this.history[--this.currentIndex]),this.vue.$data.component=this.root)},this.forward=function(){this.currentIndex>=this.history.length-1||(this.root=$.extend(!0,{},this.history[++this.currentIndex]),this.vue.$data.component=this.root)},this.save=function(){var t=this;$.ajax({type:"post",url:JinaCMS.path+"app/action/save/",data:{id:t.root.id,data:JSON.stringify(t.root)},complete:function(e){t.history.splice(0,t.history.length),t.history.push($.extend(!0,{},t.root)),t.currentIndex=0}})},this.moveComponent=function(t,e,n,i){var a=e||(n||i);if(!a)return!1;var r=JinaCMS.getRoot(t.attr("id")),o=JinaCMS.getRoot(a);if(r&&o){var s=e?0:n?1:2,l=this.findComponentById(o,a),c=this.findComponentById(r,t.attr("id")),d=$.extend(!0,{},c);r==o&&this.doDelete(r,c),this.insertComponent(o,l,d,s,r!=o)}},this.openPopup=function(t,e){t.preventDefault(),JinaCMS.removeTinymce(),$(".JinaComponentManager,.JinaColumnHandle").addClass("unvisible");var n=JinaCMS.library.getComponent(e.className);JinaCMS.popup.component=n,JinaCMS.popup.instance=e,JinaCMS.popup.values=$.extend(!0,{},e.values),JinaCMS.popup.currentonglet=0,$("#JinaPopup").dialog({position:{my:"center",at:"center",of:window},modal:!1,draggable:!0,resizable:!0,title:n.label,minWidth:900,minHeight:700,show:{effect:"size",duration:400},hide:{effect:"size",duration:400},close:function(){$(".JinaComponentManager,.JinaColumnHandle").removeClass("unvisible")}})},this.findComponentById=function(t,e){var n=e.replace(/Jina-/,""),i=n.split("_");if(1==i.length)return n=i[0],t.id==n&&t;if(n=i[1],t.children)for(var a=0;a<t.children.length;a++){if(t.children[a].id==n)return t.children[a];var r=this.findComponentById(t.children[a],e);if(r)return r}return!1},this.findParent=function(t,e){if(t==e)return t;if(t.children)for(var n=0;n<t.children.length;n++){if(t.children[n]==e)return t;var i=this.findParent(t.children[n],e);if(i)return i}return!1},this.getChildCandidates=function(t){if(!t.attr("id"))return!1;var e=this.findComponentById(this.root,t.attr("id"));return Object.keys(this.containers[e.className])},this.getSiblingCandidates=function(t){var e=this.findParent(this.root,t);return Object.keys(this.containers[e.className])},this.getValue=function(t,e){return this.lng||(this.lng=this.defaultLng),t.values[this.lng]||(t.values[this.lng]={}),t.values[this.lng][e]?t.values[this.lng][e]:t.values[this.defaultLng][e]||""},this.getStyles=function(t){var e="";if(t&&t.attributes&&t.attributes.style)for(var n in t.attributes.style)e+=n+": "+t.attributes.style[n]+";";return e},this.getDocuments=function(t,e,n){var i=this.getValue(t,e);if(!i.documents)return[];var a=[];return $.each(i.documents,(function(t,e){e.url=JinaCMS.getDocURL(e),a.push(e)})),a},this.doSortable=function(){var t=this,e=null;$("#"+t.componentId+" .JinaContainer").sortable().sortable("destroy"),$("#"+t.componentId+" .JinaContainer").each((function(){var n=t.getChildCandidates($(this).parents(".JinaComponent:first"));if(n){var i=n.map(t=>"."+t).join(",");$(this).sortable({items:i,handle:">.JinaComponentManager >.JinaComponentManagerMenu >div >.JinaComponentHandle",placeholder:"JinaPlaceholder",tolerance:"pointer",cursor:"move",revert:!0,revertDuration:0,dropOnEmpty:!0,helper:"clone",start:function(n,i){$(".JinaComponentManager").addClass("unvisible"),e=$("#"+i.item.data("id")),t.isDragging=!0,e&&e.addClass("unvisible")},stop:function(n,i){t.isDragging=!1;var a=i.item.next(".JinaComponent").attr("id"),r=i.item.prev(".JinaComponent").attr("id"),o=i.item.parents(".JinaComponent:first").attr("id");e&&e.removeClass("unvisible"),$(this).sortable("cancel"),e.attr("id")!=a&&e.attr("id")!=r&&t.moveComponent(e,a,r,o),i.item.remove()},deactivate:function(t,n){$(".JinaComponentManager").removeClass("unvisible"),e&&e.removeClass("unvisible")}})}})),$("#"+t.componentId+" .ui-draggable").draggable("destroy"),$("#"+t.componentId+" .JinaComponent:not(.Jina_Root)").each((function(){var n=t.findComponentById(t.root,$(this).attr("id")),i="";for(var a in t.containers){var r=Object.keys(t.containers[a]);if(r.length>0)for(var o=0;o<r.length;o++)r[o]==n.className&&(i+="."+a+"_Container,")}i=i.replace(/,$/,""),$(this).draggable({handle:">.JinaComponentManager >.JinaComponentManagerMenu >div >.JinaComponentHandle",cursor:"move",tolerance:"pointer",connectToSortable:i,revert:!0,revertDuration:100,helper:"clone",start:function(t,n){$(".JinaComponentManager").addClass("unvisible"),$(this).addClass("unvisible"),e=$(this)}})})),this.doColumnsDraggable(),$(window).on("resize",(function(){t.doColumnsDraggable()}))},this.doColumnsDraggable=function(){var t=this;$("#"+t.componentId+" .JinaColumnHandle.ui-draggable").draggable("destroy"),$("#"+t.componentId+" .JinaColumnHandle").each((function(){function e(t){for(var e=t.attr("class").split(" "),n=/col-md-[0-9]+$/,i=0;i<e.length;i++)if(e[i].match(n))return t.removeClass(e[i]),e[i]}var n=$(this).parent().prev(".Jina_Column"),i=20,a=$(this).parent().offset().left+$(this).parent().width()-20;n.length>0&&(i+=n.offset().left);for(var r=$(this).parent().parents(".JinaComponentContent:first").width(),o={},s=1;s<=12;s++)o[s]=r/12*s-30;$(this).draggable({axis:"x",containment:[i,0,a,5e3],stop:function(n,i){var a,s=(a=i.helper,t.findComponentById(t.root,a.parents(".Jina_Bloc:first").attr("id")).values[t.defaultLng].type),l=$(this).parent().offset().left,c=i.helper.offset().left,d=$(this).parent().prev(".Jina_Column"),u=d.width()-(l-c),h=$(this).parent().width()+(l-c),p=t.findComponentById(t.root,d.attr("id")),f=t.findComponentById(t.root,$(this).parent().attr("id"));switch(s){case"px":d.width(u),$(this).parent().width(h),p.attributes.style||(p.attributes.style={}),p.attributes.style.width=u,f.attributes.style||(f.attributes.style={}),f.attributes.style.width=h;break;case"pc":e($(this).parent()),e(d),u=Math.round(1e6*u/r)/1e4+"%",d.width(u),h=100*h/r+"%",$(this).parent().width(h),p.attributes.style||(p.attributes.style={}),p.attributes.style.width=u,f.attributes.style||(f.attributes.style={}),f.attributes.style.width=h;break;case"bootstrap":for(var m=e($(this).parent()).replace(/col-md-/,""),g=e(d).replace(/col-md-/,""),v=function(t){var e=r,n="";for(var i in o)Math.abs(t-o[i])<e&&(e=Math.abs(t-o[i]),n=i);return n}(h);v<1;)v++;for(var b=Number(g)+Number(m)-Number(v);b<1;)v--,b++;$(this).parent().addClass("col-md-"+v),d.addClass("col-md-"+b),f.classes=f.classes.replace(/col-md-[0-9]+/,"")+" col-md-"+v,p.classes=p.classes.replace(/col-md-[0-9]+/,"")+" col-md-"+b}i.helper.css("left","0px")}})}))},this.showLibrary=function(t,e){$(".JinaComponentManager").removeClass("visible"),JinaCMS.library.$data.manager=this,JinaCMS.library.$data.component=t,JinaCMS.library.$data.after=e;var n=this.getSiblingCandidates(t);JinaCMS.library.$data.classes=n,JinaCMS.library.setFilter(),$("#JinaLibrary").dialog({modal:!0,title:"Ajouter un composant",width:"800",height:"600",show:{effect:"blind",duration:800}})}}n.r(e),Vue.component("jinapopup",{template:"#jinapopup-template",props:{component:Object,instance:Object,values:Object,lng:String,defaultlng:String,lnglist:Object,currentonglet:Number},data:function(){return{uploading:!1}},methods:{fieldAction:function(t){$("#"+t+"_actions").addClass("active"),$("#"+t+"_actions_popup").dialog({modal:!0,title:"Préférences du champ",show:{effect:"blind",duration:400},close:function(){$(".JinaPopupFieldAction").removeClass("active")}})},ongletHandle:function(t){this.$parent.$data.currentonglet=t},sectionToggle:function(t){$(t.currentTarget).next().toggleClass("closed")},close:function(){$("#JinaPopup").dialog("close")},getTinymceValues:function(){var t=this;$("#JinaPopup .richtext").each((function(){var e=$(this).attr("id").split("-");t.values[e[0]][e[1]]=tinyMCE.get($(this).attr("id")).getContent()}))},save:function(){this.getTinymceValues(),this.instance.values=$.extend(!0,{},this.values),this.close()},switchLng:function(t){t.preventDefault(),this.getTinymceValues(),JinaCMS.removeTinymce();var e=$(t.target).data("lng");this.values[e]||(this.values[e]={}),this.$parent.$data.lng=e},dropFile:function(t){var e=t.currentTarget;$(e.children[0]).click()},getDropped:function(t,e,n){t.preventDefault();var i=t.currentTarget;$(i).removeClass("over"),i.children[0].files=t.dataTransfer.files,this.afterChange(i.children[0],e,n)},changeFile:function(t,e,n){this.afterChange(t.target,e,n)},deleteFile:function(t,e,n,i,a){t.stopImmediatePropagation();var r=this;$.each(this.values[e][n][i],(function(t,o){o==a&&r.values[e][n][i].splice(t,1)})),this.$forceUpdate()},afterChange:function(t,e,n){if(t.files.length){var i=this;$.each(t.files,(function(t,a){i.values[e][n].docs.push(a)})),this.$forceUpdate()}},isImage:function(t){return"image"==t.type.replace(/(.*?)\/(.*)/,"$1")},getDocURL:function(t){return JinaCMS.getDocURL(t)},dragOver:function(t){t.preventDefault()},dragEnter:function(t){t.preventDefault(),$(t.target).addClass("over")},dragExit:function(t){t.preventDefault(),$(t.target).removeClass("over")},getFieldValue:function(t,e,n){return this.values[t][e]||(this.values[t][e]={}),this.values[t][e][n]||(this.values[t][e][n]=[]),this.values[t][e][n]},submitFiles:function(t,e,n){if(this.$data.uploading)return!1;this.$data.uploading=!0;var i=this.getFieldValue(e,n,"docs");if(0!=i.length){var a=new FormData;$.each(i,(function(t,e){a.append(t,e)}));var r=this;$.ajax({type:"post",url:JinaCMS.path+"app/action/upload/",data:a,processData:!1,contentType:!1,xhr:function(){var e=new XMLHttpRequest;return e.upload.addEventListener("progress",(function(e){$(t.target).find(".jauge").css("width","calc("+e.loaded/e.total*100+"% - 20px)").show()}),!1),e},success:function(t){var i=JSON.parse(t);r.addDocuments(e,n,i.uploaded,!0),console.log(t)},complete:function(){r.$data.uploading=!1,$(t.target).find(".jauge").hide()}})}},addDocuments:function(t,e,n,i){this.values[t][e].documents||(this.values[t][e].documents=[]);var a=this;$.each(n,(function(n,i){var r=!1;$.each(a.values[t][e].documents,(function(t,e){e.folder==i.folder&&e.name==i.name&&(r=!0)})),r||a.values[t][e].documents.push(i)})),i&&(this.values[t][e].docs=[]),this.$forceUpdate()}}}),Vue.component("library",{template:"#jinalibrary-template",props:{node:Object,component:Object,manager:Object,after:0},methods:{insert:function(t,e,n,i,a){t.stopImmediatePropagation(),"folder"!=e.type&&(n.insertComponent(null,i,{id:"8",name:"Article 8",className:"Jina_Article",children:[],values:{fr:{title:"Mon titre 8",corps:'Corps de mon <b class="test">joli</b> article'},en:{corps:"My beautiful article"}}},a,!0),$("#JinaLibrary").dialog("close"))}}});const a={init:function(t){this.managers=[],this.path=t.path,this.params=t,this.params.lng||(this.params.lng=t.defaultLng),this.collection=t.collection,this.containers=t.containers,this.components=t.components,this.defaultLng=t.defaultLng,this.maxHistory=t.maxHistory,t.admin&&(this.popup=function(t){return new Vue({el:"#JinaPopup",data:{component:{},instance:{},values:{},lng:t.lng,defaultlng:t.defaultLng,currentonglet:0,lnglist:{fr:"fr.png",en:"en.png",es:"es.png",de:"de.png",it:"it.png"}},beforeUpdate:function(){this.$data.values[this.$data.lng]||(this.$data.values[this.$data.lng]={})},updated:function(){tinymce.init({selector:"#JinaPopup .richtext",theme:"modern",schema:"html5",inline:!1,plugins:"textcolor paste link code",fontsize_formats:"14pt 16pt",block_formats:"Paragraph=div",style_formats:[{title:"Mon format",items:[{title:"Gras",format:"bold"},{title:"Grand texte",inline:"span",classes:"big"}]}],style_formats_merge:!0,language:"fr_FR",toolbar:"undo redo | styleselect | fontsizeselect | bold italic underline | bullist numlist | forecolor backcolor | sub sup alignleft aligncenter alignright alignjustify | link | code",statusbar:!1,menubar:!1})}})}(t),this.library=function(t){return new Vue({el:"#JinaLibrary",data:{collection:t.collection,manager:{},component:{},after:0,classes:[]},methods:{setFilter:function(t){t&&(this.classes=t),this.setAvailable(this.collection),this.collection=JSON.parse(JSON.stringify(this.collection))},setAvailable:function(t){if("folder"==t.type){if(t.available=!1,t.children)for(var e in t.children)this.setAvailable(t.children[e])&&(t.available=!0)}else 0==this.classes.length?t.available=!0:t.available=this.classes.indexOf(t.className)>=0;return t.available},getComponent:function(t,e){if(void 0===e&&(e=this.collection),e.children){var n="";for(var i in e.children){if(e.children[i].className==t)return e.children[i];if(n=this.getComponent(t,e.children[i]))return n}}}}})}(this.params))},removeTinymce:function(){for(var t=tinymce.get(),e=t.length-1;e>-1;e--)t[e].destroy()},getDocURL:function(t){return this.path+"upload/"+t.folder+"/"+t.name},display:function(t){var e=new i(t,this.params);e.vue=new Vue({el:"#"+t.componentId,data:{component:t.component,values:t.values,manager:e,cindex:0},mounted:function(){a.params.admin&&this.manager.doSortable()}}),this.managers.push(e)},getRoot:function(t){var e,n=t.replace(/Jina-/,"").split("_")[0];return $.each(this.managers,(function(t,i){i.root.id==n&&(e=i.root)})),e}};n.d(e,"JinaCMS",(function(){return a})),$(document).on("focusin",(function(t){$(t.target).closest(".mce-window").length&&t.stopImmediatePropagation()}))}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0ppbmFDTVMvbWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvSmluYUNNUy9wb3B1cC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvSmluYUNNUy9saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy9KaW5hQ01TL2ppbmEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0ppbmFDTVMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJKaW5hTWFuYWdlciIsInBhcmFtcyIsImFkbWluUGFyYW1zIiwidGhpcyIsImNvbXBvbmVudElkIiwicm9vdCIsImNvbXBvbmVudCIsImhpc3RvcnkiLCIkIiwiZXh0ZW5kIiwidnVlIiwiY3VycmVudEluZGV4IiwibWF4SGlzdG9yeSIsImlzRHJhZ2dpbmciLCJjaGFuZ2VzIiwiY3VycmVudFZlcnNpb24iLCJsaWJyYXJ5IiwiY29udGFpbmVycyIsImN1cnJlbnRJZCIsImxuZyIsImRlZmF1bHRMbmciLCJkZWxldGVDb21wb25lbnQiLCJlIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiZG9EZWxldGUiLCJub2RlIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJzcGxpY2UiLCJpbnNlcnRDb21wb25lbnQiLCJuZXdDb21wb25lbnQiLCJhZnRlciIsImdlbmVyYXRlSWQiLCJwdXNoIiwiaWQiLCJnZXRNYXhJZCIsImdlbmVyYXRlQ2hpbGRyZW5JZHMiLCJtYXgiLCJOdW1iZXIiLCJhZGRDb21wb25lbnQiLCJjb2RlIiwiY2xhc3NOYW1lIiwidGFnIiwidmFsdWVzIiwiaXNUb3VjaGVkIiwiSlNPTiIsInN0cmluZ2lmeSIsImJhY2t3YXJkIiwiJGRhdGEiLCJmb3J3YXJkIiwic2F2ZSIsInRoYXQiLCJhamF4IiwidHlwZSIsInVybCIsIkppbmFDTVMiLCJwYXRoIiwiZGF0YSIsImNvbXBsZXRlIiwiZmxvdyIsIm1vdmVDb21wb25lbnQiLCJuZXh0Q29tcG9uZW50IiwicHJldmlvdXNDb21wb25lbnQiLCJwYXJlbnRDb21wb25lbnQiLCJ0YXJnZXROb2RlIiwic3JjUm9vdCIsImdldFJvb3QiLCJhdHRyIiwidGFyZ2V0Um9vdCIsInRhcmdldCIsImZpbmRDb21wb25lbnRCeUlkIiwiaXRlbSIsIml0ZW1fIiwib3BlblBvcHVwIiwiZXZlbnQiLCJjX2luc3RhbmNlIiwicHJldmVudERlZmF1bHQiLCJyZW1vdmVUaW55bWNlIiwiYWRkQ2xhc3MiLCJnZXRDb21wb25lbnQiLCJwb3B1cCIsImluc3RhbmNlIiwiY3VycmVudG9uZ2xldCIsImRpYWxvZyIsInBvc2l0aW9uIiwibXkiLCJhdCIsIm9mIiwid2luZG93IiwibW9kYWwiLCJkcmFnZ2FibGUiLCJyZXNpemFibGUiLCJ0aXRsZSIsImxhYmVsIiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJzaG93IiwiZWZmZWN0IiwiZHVyYXRpb24iLCJoaWRlIiwiY2xvc2UiLCJyZW1vdmVDbGFzcyIsIl9pZCIsInJlcGxhY2UiLCJwYXJ0cyIsInNwbGl0IiwiZmluZFBhcmVudCIsImdldENoaWxkQ2FuZGlkYXRlcyIsIm9iaiIsImtleXMiLCJnZXRTaWJsaW5nQ2FuZGlkYXRlcyIsInBhcmVudCIsImdldFZhbHVlIiwiZ2V0U3R5bGVzIiwicmV0IiwiYXR0cmlidXRlcyIsInN0eWxlIiwiZ2V0RG9jdW1lbnRzIiwiZmllbGQiLCJkb2N1bWVudHMiLCJyZXN1bHQiLCJlYWNoIiwiayIsImRvY3VtZW50IiwiZ2V0RG9jVVJMIiwiZG9Tb3J0YWJsZSIsImRyYWdnZWQiLCJzb3J0YWJsZSIsInBhcmVudHMiLCJpdGVtcyIsIm1hcCIsImpvaW4iLCJoYW5kbGUiLCJwbGFjZWhvbGRlciIsInRvbGVyYW5jZSIsImN1cnNvciIsInJldmVydCIsInJldmVydER1cmF0aW9uIiwiZHJvcE9uRW1wdHkiLCJoZWxwZXIiLCJzdGFydCIsInVpIiwic3RvcCIsIm5leHQiLCJwcmV2IiwicHAiLCJyZW1vdmUiLCJkZWFjdGl2YXRlIiwiY2xhc3NlcyIsImNvbnRhaW5lciIsImNvbm5lY3RUb1NvcnRhYmxlIiwiZG9Db2x1bW5zRHJhZ2dhYmxlIiwib24iLCJyZW1vdmVCb290c3RyYXBDbGFzcyIsIm1hdGNoIiwicHJldmlvdXMiLCJ4MSIsIngyIiwib2Zmc2V0IiwibGVmdCIsIndpZHRoIiwiYm9vdHN0cmFwX3N0ZXBzIiwiYXhpcyIsImNvbnRhaW5tZW50Iiwib3RoZXIiLCJ3MSIsIncyIiwiY290aGVyIiwiY3RoaXMiLCJNYXRoIiwicm91bmQiLCJleF9jbGFzcyIsImV4X2NsYXNzX290aGVyIiwibmV3X2NsYXNzIiwidyIsImRpZmYiLCJiY2xhc3MiLCJhYnMiLCJnZXRCb290c3RyYXBDbGFzcyIsIm5ld19jbGFzc19vdGhlciIsImNzcyIsInNob3dMaWJyYXJ5IiwibWFuYWdlciIsInNldEZpbHRlciIsImhlaWdodCIsIlZ1ZSIsInRlbXBsYXRlIiwicHJvcHMiLCJTdHJpbmciLCJkZWZhdWx0bG5nIiwibG5nbGlzdCIsInVwbG9hZGluZyIsIm1ldGhvZHMiLCJmaWVsZEFjdGlvbiIsIm9uZ2xldEhhbmRsZSIsIiRwYXJlbnQiLCJzZWN0aW9uVG9nZ2xlIiwiY3VycmVudFRhcmdldCIsInRvZ2dsZUNsYXNzIiwiZ2V0VGlueW1jZVZhbHVlcyIsInRpbnlNQ0UiLCJnZXRDb250ZW50Iiwic3dpdGNoTG5nIiwiZHJvcEZpbGUiLCJjbGljayIsImdldERyb3BwZWQiLCJmaWxlcyIsImRhdGFUcmFuc2ZlciIsImFmdGVyQ2hhbmdlIiwiY2hhbmdlRmlsZSIsImRlbGV0ZUZpbGUiLCJzdWIiLCJkb2MiLCJ2IiwiJGZvcmNlVXBkYXRlIiwiaXNJbWFnZSIsImRyYWdPdmVyIiwiZHJhZ0VudGVyIiwiZHJhZ0V4aXQiLCJnZXRGaWVsZFZhbHVlIiwic3VibWl0RmlsZXMiLCJkb2NzIiwiZmRhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInVwbG9hZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJmaW5kIiwibG9hZGVkIiwidG90YWwiLCJzdWNjZXNzIiwicGFyc2UiLCJhZGREb2N1bWVudHMiLCJ1cGxvYWRlZCIsImNvbnNvbGUiLCJsb2ciLCJyYXoiLCJleGlzdHMiLCJrayIsInZ2IiwiaW5zZXJ0IiwiZnIiLCJjb3JwcyIsImVuIiwiaW5pdCIsIm1hbmFnZXJzIiwiY29sbGVjdGlvbiIsImNvbXBvbmVudHMiLCJhZG1pbiIsImVsIiwiZXMiLCJkZSIsIml0IiwiYmVmb3JlVXBkYXRlIiwidXBkYXRlZCIsInRpbnltY2UiLCJzZWxlY3RvciIsInRoZW1lIiwic2NoZW1hIiwiaW5saW5lIiwicGx1Z2lucyIsImZvbnRzaXplX2Zvcm1hdHMiLCJibG9ja19mb3JtYXRzIiwic3R5bGVfZm9ybWF0cyIsImZvcm1hdCIsInN0eWxlX2Zvcm1hdHNfbWVyZ2UiLCJsYW5ndWFnZSIsInRvb2xiYXIiLCJzdGF0dXNiYXIiLCJtZW51YmFyIiwic2V0UG9wdXAiLCJzZXRBdmFpbGFibGUiLCJhdmFpbGFibGUiLCJjaGlsZCIsImluZGV4T2YiLCJ1bmRlZmluZWQiLCJzZXRMaWJyYXJ5IiwiZWRpdG9ycyIsImRlc3Ryb3kiLCJmb2xkZXIiLCJkaXNwbGF5IiwiY2luZGV4IiwibW91bnRlZCIsInJvb3RfaWQiLCJj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UTdSLE9BQU8yUCxPQUFPelAsS0FBS21MLFFBQVF6RCxnQkFHM0MxSCxLQUFLc1AsU0FBU3hOLEtBQUtxSixJQUVyQnBILFFBQVMsU0FBVWhDLEdBQ2pCLElBQUk3QixFQUdBMFIsRUFGTTdQLEVBQUdxRSxRQUFRLFFBQVMsSUFDZEUsTUFBTSxLQUNGLEdBSXBCLE9BSEFqRyxFQUFFaUgsS0FBS3RILEtBQUtzUCxVQUFVLFNBQVMvSCxFQUFHNEQsR0FDNUJBLEVBQVFqTCxLQUFLNkIsSUFBTTZQLElBQVMxUixFQUFPaUwsRUFBUWpMLFNBRTFDQSxJQ3BEWCx3Q0FHQUcsRUFBRW1ILFVBQVU2QixHQUFHLFdBQVcsU0FBU2xJLEdBQzNCZCxFQUFFYyxFQUFFK0MsUUFBUTJOLFFBQVEsZUFBZXJRLFFBQ25DTCxFQUFFQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIEppbmFNYW5hZ2VyKHBhcmFtcywgYWRtaW5QYXJhbXMpIHtcbiAgICB0aGlzLmNvbXBvbmVudElkID0gcGFyYW1zLmNvbXBvbmVudElkXG4gICAgdGhpcy5yb290ID0gcGFyYW1zLmNvbXBvbmVudFxuICAgIHRoaXMuaGlzdG9yeSA9IFskLmV4dGVuZCh0cnVlLCB7fSwgcGFyYW1zLmNvbXBvbmVudCldXG4gICAgdGhpcy52dWUgPSB7fVxuICAgIHRoaXMuY3VycmVudEluZGV4ID0gMFxuICAgIHRoaXMubWF4SGlzdG9yeSA9IGFkbWluUGFyYW1zLm1heEhpc3RvcnlcbiAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZVxuICAgIHRoaXMuY2hhbmdlcyA9IDBcbiAgICB0aGlzLmN1cnJlbnRWZXJzaW9uID0gMFxuICAgIHRoaXMubGlicmFyeSA9IHt9XG4gICAgdGhpcy5jb250YWluZXJzID0gYWRtaW5QYXJhbXMuY29udGFpbmVyc1xuICAgIHRoaXMuY3VycmVudElkID0gMFxuICAgIHRoaXMubG5nID0gYWRtaW5QYXJhbXMubG5nXG4gICAgdGhpcy5kZWZhdWx0TG5nID0gYWRtaW5QYXJhbXMuZGVmYXVsdExuZ1xuICAgIHRoaXMuZGVsZXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLmRvRGVsZXRlKHRoaXMucm9vdCwgY29tcG9uZW50KTtcbiAgICB9XG4gICAgdGhpcy5kb0RlbGV0ZSA9IGZ1bmN0aW9uIChub2RlLCBjb21wb25lbnQpIHtcbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmNoaWxkcmVuW2ldID09IGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLmNoaWxkcmVuLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvRGVsZXRlKG5vZGUuY2hpbGRyZW5baV0sIGNvbXBvbmVudCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuaW5zZXJ0Q29tcG9uZW50ID0gZnVuY3Rpb24gKG5vZGUsIGNvbXBvbmVudCwgbmV3Q29tcG9uZW50LCBhZnRlciwgZ2VuZXJhdGVJZCkge1xuICAgICAgICBpZiAoZ2VuZXJhdGVJZCkgdGhpcy5nZW5lcmF0ZUlkKG5ld0NvbXBvbmVudClcbiAgICAgICAgaWYgKCFub2RlKSBub2RlID0gdGhpcy5yb290XG4gICAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbltpXSA9PSBjb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFmdGVyID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW5baV0uY2hpbGRyZW4ucHVzaChuZXdDb21wb25lbnQpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmNoaWxkcmVuLnNwbGljZShpICsgYWZ0ZXIsIDAsIG5ld0NvbXBvbmVudClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5zZXJ0Q29tcG9uZW50KG5vZGUuY2hpbGRyZW5baV0sIGNvbXBvbmVudCwgbmV3Q29tcG9uZW50LCBhZnRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5nZW5lcmF0ZUlkID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmdldE1heElkKHRoaXMucm9vdCwgMClcbiAgICAgICAgbm9kZS5pZCA9ICsraWRcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUNoaWxkcmVuSWRzKG5vZGUsIG5vZGUuaWQpXG4gICAgfVxuICAgIHRoaXMuZ2V0TWF4SWQgPSBmdW5jdGlvbihub2RlLCBtYXgpIHtcbiAgICAgICAgaWYgKCFub2RlKSBub2RlID0gdGhpcy5yb290O1xuICAgICAgICBpZiAoTnVtYmVyKG5vZGUuaWQpID4gTnVtYmVyKG1heCkpIG1heCA9IG5vZGUuaWRcbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG1heCA9IHRoaXMuZ2V0TWF4SWQobm9kZS5jaGlsZHJlbltpXSwgbWF4KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXhcbiAgICB9XG4gICAgdGhpcy5nZW5lcmF0ZUNoaWxkcmVuSWRzID0gZnVuY3Rpb24obm9kZSwgaWQpIHtcbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW5baV0uaWQgPSArK2lkXG4gICAgICAgICAgICAgICAgaWQgPSB0aGlzLmdlbmVyYXRlQ2hpbGRyZW5JZHMobm9kZS5jaGlsZHJlbltpXSwgaWQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlkXG4gICAgfVxuICAgIHRoaXMuYWRkQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgZSkge1xuICAgICAgICBjb21wb25lbnQuY2hpbGRyZW4ucHVzaCh7XG4gICAgICAgICAgICBpZDogJzcnLFxuICAgICAgICAgICAgY29kZTogJ3R5cGUzJyxcbiAgICAgICAgICAgIG5hbWU6ICdDb21wb3NhbnQgNycsXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdKaW5hX0ZpZWxkX1NlbGVjdCcsXG4gICAgICAgICAgICB0YWc6ICdqaW5hZGJmaWVsZHNlbGVjdCcsXG4gICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAgICAnMyc6ICdWYWxldXIgMycsXG4gICAgICAgICAgICAgICAgJzQnOiAnVmFsZXVyIDQnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmlzVG91Y2hlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubWF4SGlzdG9yeSA+IDAgJiYgdGhpcy5oaXN0b3J5Lmxlbmd0aCA+IHRoaXMubWF4SGlzdG9yeSArIDEpIHtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5zcGxpY2UoMCwgMSk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbmRleC0tO1xuICAgICAgICB9XG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeSh0aGlzLmhpc3RvcnlbdGhpcy5jdXJyZW50SW5kZXhdKSAhPSBKU09OLnN0cmluZ2lmeSh0aGlzLnJvb3QpKSB7XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnlbKyt0aGlzLmN1cnJlbnRJbmRleF0gPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5yb290KTtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5zcGxpY2UodGhpcy5jdXJyZW50SW5kZXggKyAxLCB0aGlzLmhpc3RvcnkubGVuZ3RoIC0gKHRoaXMuY3VycmVudEluZGV4ICsgMSkpXG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh0aGlzLnJvb3QpKVxuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50SW5kZXggPiAwO1xuICAgIH1cbiAgICB0aGlzLmJhY2t3YXJkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50SW5kZXggPT0gMCkgcmV0dXJuO1xuICAgICAgICB0aGlzLnJvb3QgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5oaXN0b3J5Wy0tdGhpcy5jdXJyZW50SW5kZXhdKTtcbiAgICAgICAgdGhpcy52dWUuJGRhdGEuY29tcG9uZW50ID0gdGhpcy5yb290XG4gICAgfVxuICAgIHRoaXMuZm9yd2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEluZGV4ID49IHRoaXMuaGlzdG9yeS5sZW5ndGggLSAxKSByZXR1cm47XG4gICAgICAgIHRoaXMucm9vdCA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLmhpc3RvcnlbKyt0aGlzLmN1cnJlbnRJbmRleF0pO1xuICAgICAgICB0aGlzLnZ1ZS4kZGF0YS5jb21wb25lbnQgPSB0aGlzLnJvb3RcbiAgICB9XG4gICAgdGhpcy5zYXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcbiAgICAgICAgICAgIHVybDogSmluYUNNUy5wYXRoICsgJ2FwcC9hY3Rpb24vc2F2ZS8nLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGlkOiB0aGF0LnJvb3QuaWQsXG4gICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkodGhhdC5yb290KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoZmxvdykge1xuICAgICAgICAgICAgICAgIHRoYXQuaGlzdG9yeS5zcGxpY2UoMCwgdGhhdC5oaXN0b3J5Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdGhhdC5oaXN0b3J5LnB1c2goJC5leHRlbmQodHJ1ZSwge30sIHRoYXQucm9vdCkpO1xuICAgICAgICAgICAgICAgIHRoYXQuY3VycmVudEluZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5tb3ZlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgbmV4dENvbXBvbmVudCwgcHJldmlvdXNDb21wb25lbnQsIHBhcmVudENvbXBvbmVudCkge1xuICAgICAgICB2YXIgdGFyZ2V0Tm9kZSA9IChuZXh0Q29tcG9uZW50ID8gbmV4dENvbXBvbmVudCA6IChwcmV2aW91c0NvbXBvbmVudCA/IHByZXZpb3VzQ29tcG9uZW50IDogcGFyZW50Q29tcG9uZW50KSlcbiAgICAgICAgaWYgKCF0YXJnZXROb2RlKSByZXR1cm4gZmFsc2VcbiAgICAgICAgdmFyIHNyY1Jvb3QgPSBKaW5hQ01TLmdldFJvb3QoY29tcG9uZW50LmF0dHIoJ2lkJykpXG4gICAgICAgIHZhciB0YXJnZXRSb290ID0gSmluYUNNUy5nZXRSb290KHRhcmdldE5vZGUpXG4gICAgICAgIGlmICghc3JjUm9vdCB8fCAhdGFyZ2V0Um9vdCkgcmV0dXJuXG4gICAgICAgIHZhciBtb2RlID0gKG5leHRDb21wb25lbnQgPyAwIDogKHByZXZpb3VzQ29tcG9uZW50ID8gMSA6IDIpKVxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5maW5kQ29tcG9uZW50QnlJZCh0YXJnZXRSb290LCB0YXJnZXROb2RlKVxuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuZmluZENvbXBvbmVudEJ5SWQoc3JjUm9vdCwgY29tcG9uZW50LmF0dHIoJ2lkJykpXG4gICAgICAgIHZhciBpdGVtXyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBpdGVtKVxuICAgICAgICBpZiAoc3JjUm9vdCA9PSB0YXJnZXRSb290KSB0aGlzLmRvRGVsZXRlKHNyY1Jvb3QsIGl0ZW0pXG4gICAgICAgIHRoaXMuaW5zZXJ0Q29tcG9uZW50KHRhcmdldFJvb3QsIHRhcmdldCwgaXRlbV8sIG1vZGUsIHNyY1Jvb3QgIT0gdGFyZ2V0Um9vdClcbiAgICB9XG4gICAgdGhpcy5vcGVuUG9wdXAgPSBmdW5jdGlvbiAoZXZlbnQsIGNfaW5zdGFuY2UpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICBKaW5hQ01TLnJlbW92ZVRpbnltY2UoKVxuICAgICAgICAkKCcuSmluYUNvbXBvbmVudE1hbmFnZXIsLkppbmFDb2x1bW5IYW5kbGUnKS5hZGRDbGFzcygndW52aXNpYmxlJylcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IEppbmFDTVMubGlicmFyeS5nZXRDb21wb25lbnQoY19pbnN0YW5jZS5jbGFzc05hbWUpXG4gICAgICAgIEppbmFDTVMucG9wdXAuY29tcG9uZW50ID0gY29tcG9uZW50XG4gICAgICAgIEppbmFDTVMucG9wdXAuaW5zdGFuY2UgPSBjX2luc3RhbmNlXG4gICAgICAgIEppbmFDTVMucG9wdXAudmFsdWVzID0gJC5leHRlbmQodHJ1ZSwge30sIGNfaW5zdGFuY2UudmFsdWVzKVxuICAgICAgICBKaW5hQ01TLnBvcHVwLmN1cnJlbnRvbmdsZXQgPSAwXG4gICAgICAgICQoJyNKaW5hUG9wdXAnKS5kaWFsb2coe1xuICAgICAgICAgICAgcG9zaXRpb246IHtteTogXCJjZW50ZXJcIiwgYXQ6IFwiY2VudGVyXCIsIG9mOiB3aW5kb3d9LFxuICAgICAgICAgICAgbW9kYWw6IGZhbHNlLFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLFxuICAgICAgICAgICAgdGl0bGU6IGNvbXBvbmVudC5sYWJlbCxcbiAgICAgICAgICAgIG1pbldpZHRoOiA5MDAsXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IDcwMCxcbiAgICAgICAgICAgIHNob3c6IHtlZmZlY3Q6IFwic2l6ZVwiLCBkdXJhdGlvbjogNDAwfSxcbiAgICAgICAgICAgIGhpZGU6IHtlZmZlY3Q6IFwic2l6ZVwiLCBkdXJhdGlvbjogNDAwfSxcbiAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJCgnLkppbmFDb21wb25lbnRNYW5hZ2VyLC5KaW5hQ29sdW1uSGFuZGxlJykucmVtb3ZlQ2xhc3MoJ3VudmlzaWJsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmZpbmRDb21wb25lbnRCeUlkID0gZnVuY3Rpb24gKHJvb3QsIGlkKSB7XG4gICAgICAgIHZhciBfaWQgPSBpZC5yZXBsYWNlKC9KaW5hLS8sICcnKVxuICAgICAgICB2YXIgcGFydHMgPSBfaWQuc3BsaXQoJ18nKVxuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIF9pZCA9IHBhcnRzWzBdO1xuICAgICAgICAgICAgcmV0dXJuIChyb290LmlkID09IF9pZCA/IHJvb3QgOiBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9pZCA9IHBhcnRzWzFdXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvb3QuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm9vdC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChyb290LmNoaWxkcmVuW2ldLmlkID09IF9pZCkgcmV0dXJuIHJvb3QuY2hpbGRyZW5baV1cbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5maW5kQ29tcG9uZW50QnlJZChyb290LmNoaWxkcmVuW2ldLCBpZClcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0KSByZXR1cm4gdGFyZ2V0XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHRoaXMuZmluZFBhcmVudCA9IGZ1bmN0aW9uIChyb290LCBjb21wb25lbnQpIHtcbiAgICAgICAgaWYgKHJvb3QgPT0gY29tcG9uZW50KSByZXR1cm4gcm9vdFxuICAgICAgICBpZiAocm9vdC5jaGlsZHJlbikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb290LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJvb3QuY2hpbGRyZW5baV0gPT0gY29tcG9uZW50KSByZXR1cm4gcm9vdFxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLmZpbmRQYXJlbnQocm9vdC5jaGlsZHJlbltpXSwgY29tcG9uZW50KVxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIHJldHVybiB0YXJnZXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgdGhpcy5nZXRDaGlsZENhbmRpZGF0ZXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmICghb2JqLmF0dHIoJ2lkJykpIHJldHVybiBmYWxzZVxuICAgICAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5maW5kQ29tcG9uZW50QnlJZCh0aGlzLnJvb3QsIG9iai5hdHRyKCdpZCcpKVxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5jb250YWluZXJzW2NvbXBvbmVudC5jbGFzc05hbWVdKVxuICAgIH1cbiAgICB0aGlzLmdldFNpYmxpbmdDYW5kaWRhdGVzID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5maW5kUGFyZW50KHRoaXMucm9vdCwgY29tcG9uZW50KVxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5jb250YWluZXJzW3BhcmVudC5jbGFzc05hbWVdKVxuICAgIH1cbiAgICB0aGlzLmdldFZhbHVlID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgY29kZSkge1xuICAgICAgICBpZiAoIXRoaXMubG5nKSB0aGlzLmxuZyA9IHRoaXMuZGVmYXVsdExuZ1xuICAgICAgICBpZiAoIWNvbXBvbmVudC52YWx1ZXNbdGhpcy5sbmddKSBjb21wb25lbnQudmFsdWVzW3RoaXMubG5nXSA9IHt9XG4gICAgICAgIGlmICghY29tcG9uZW50LnZhbHVlc1t0aGlzLmxuZ11bY29kZV0pIHtcbiAgICAgICAgICAgIHJldHVybiAoY29tcG9uZW50LnZhbHVlc1t0aGlzLmRlZmF1bHRMbmddW2NvZGVdIHx8ICcnKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wb25lbnQudmFsdWVzW3RoaXMubG5nXVtjb2RlXVxuICAgIH1cbiAgICB0aGlzLmdldFN0eWxlcyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdmFyIHJldCA9ICcnXG4gICAgICAgIGlmIChvYmogJiYgb2JqLmF0dHJpYnV0ZXMgJiYgb2JqLmF0dHJpYnV0ZXMuc3R5bGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gb2JqLmF0dHJpYnV0ZXMuc3R5bGUpIHtcbiAgICAgICAgICAgICAgICByZXQgKz0gcCArICc6ICcgKyBvYmouYXR0cmlidXRlcy5zdHlsZVtwXSArICc7J1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXRcbiAgICB9XG4gICAgdGhpcy5nZXREb2N1bWVudHMgPSBmdW5jdGlvbiAoY29tcG9uZW50LCBjb2RlLCB0eXBlKSB7XG4gICAgICAgIHZhciBmaWVsZCA9IHRoaXMuZ2V0VmFsdWUoY29tcG9uZW50LCBjb2RlKVxuICAgICAgICBpZiAoIWZpZWxkLmRvY3VtZW50cykgcmV0dXJuIFtdXG4gICAgICAgIHZhciByZXN1bHQgPSBbXVxuICAgICAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICAgJC5lYWNoKGZpZWxkLmRvY3VtZW50cywgZnVuY3Rpb24gKGssIGRvY3VtZW50KSB7XG4gICAgICAgICAgICBkb2N1bWVudFsndXJsJ10gPSBKaW5hQ01TLmdldERvY1VSTChkb2N1bWVudClcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRvY3VtZW50KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICB0aGlzLmRvU29ydGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgICB2YXIgc291cmNlID0gbnVsbFxuICAgICAgICB2YXIgZHJhZ2dlZCA9IG51bGxcbiAgICAgICAgdmFyIG5leHQgPSBudWxsXG4gICAgICAgIHZhciBwYXJlbnQgPSBudWxsXG4gICAgICAgICQoJyMnK3RoYXQuY29tcG9uZW50SWQrJyAuSmluYUNvbnRhaW5lcicpLnNvcnRhYmxlKCkuc29ydGFibGUoJ2Rlc3Ryb3knKVxuICAgICAgICAkKCcjJyt0aGF0LmNvbXBvbmVudElkKycgLkppbmFDb250YWluZXInKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoYXQuZ2V0Q2hpbGRDYW5kaWRhdGVzKCQodGhpcykucGFyZW50cygnLkppbmFDb21wb25lbnQ6Zmlyc3QnKSlcbiAgICAgICAgICAgIGlmICghY2hpbGRyZW4pIHJldHVyblxuICAgICAgICAgICAgdmFyIGl0ZW1zID0gY2hpbGRyZW4ubWFwKHMgPT4gJy4nICsgcykuam9pbignLCcpXG4gICAgICAgICAgICAkKHRoaXMpLnNvcnRhYmxlKHtcbiAgICAgICAgICAgICAgICBpdGVtczogaXRlbXMsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiAnPi5KaW5hQ29tcG9uZW50TWFuYWdlciA+LkppbmFDb21wb25lbnRNYW5hZ2VyTWVudSA+ZGl2ID4uSmluYUNvbXBvbmVudEhhbmRsZScsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdKaW5hUGxhY2Vob2xkZXInLFxuICAgICAgICAgICAgICAgIHRvbGVyYW5jZTogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgIGN1cnNvcjogJ21vdmUnLFxuICAgICAgICAgICAgICAgIHJldmVydDogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXZlcnREdXJhdGlvbjogMCxcbiAgICAgICAgICAgICAgICBkcm9wT25FbXB0eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBoZWxwZXI6ICdjbG9uZScsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIChldmVudCwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLkppbmFDb21wb25lbnRNYW5hZ2VyJykuYWRkQ2xhc3MoJ3VudmlzaWJsZScpXG4gICAgICAgICAgICAgICAgICAgIGRyYWdnZWQgPSAkKCcjJyArIHVpLml0ZW0uZGF0YSgnaWQnKSlcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5pc0RyYWdnaW5nID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ2dlZCkgZHJhZ2dlZC5hZGRDbGFzcygndW52aXNpYmxlJylcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uIChldmVudCwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5pc0RyYWdnaW5nID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB1aS5pdGVtLm5leHQoJy5KaW5hQ29tcG9uZW50JykuYXR0cignaWQnKVxuICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IHVpLml0ZW0ucHJldignLkppbmFDb21wb25lbnQnKS5hdHRyKCdpZCcpXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcCA9IHVpLml0ZW0ucGFyZW50cygnLkppbmFDb21wb25lbnQ6Zmlyc3QnKS5hdHRyKCdpZCcpXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcmFnZ2VkKSBkcmFnZ2VkLnJlbW92ZUNsYXNzKCd1bnZpc2libGUnKVxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnNvcnRhYmxlKCdjYW5jZWwnKVxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ2dlZC5hdHRyKCdpZCcpICE9IG4gJiYgZHJhZ2dlZC5hdHRyKCdpZCcpICE9IHApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQubW92ZUNvbXBvbmVudChkcmFnZ2VkLCBuLCBwLCBwcClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB1aS5pdGVtLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZWFjdGl2YXRlOiBmdW5jdGlvbiAoZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJy5KaW5hQ29tcG9uZW50TWFuYWdlcicpLnJlbW92ZUNsYXNzKCd1bnZpc2libGUnKVxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ2dlZCkgZHJhZ2dlZC5yZW1vdmVDbGFzcygndW52aXNpYmxlJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICAkKCcjJyt0aGF0LmNvbXBvbmVudElkKycgLnVpLWRyYWdnYWJsZScpLmRyYWdnYWJsZSgnZGVzdHJveScpXG4gICAgICAgICQoJyMnK3RoYXQuY29tcG9uZW50SWQrJyAuSmluYUNvbXBvbmVudDpub3QoLkppbmFfUm9vdCknKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSB0aGF0LmZpbmRDb21wb25lbnRCeUlkKHRoYXQucm9vdCwgJCh0aGlzKS5hdHRyKCdpZCcpKTtcbiAgICAgICAgICAgIHZhciBjbGFzc2VzID0gJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBjb250YWluZXIgaW4gdGhhdC5jb250YWluZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBPYmplY3Qua2V5cyh0aGF0LmNvbnRhaW5lcnNbY29udGFpbmVyXSk7XG4gICAgICAgICAgICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjW2ldID09IGNvbXBvbmVudC5jbGFzc05hbWUpIGNsYXNzZXMgKz0gJy4nICsgY29udGFpbmVyICsgJ19Db250YWluZXIsJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xhc3NlcyA9IGNsYXNzZXMucmVwbGFjZSgvLCQvLCAnJyk7Ly8kKHRoaXMpLnBhcmVudHMoJy5KaW5hQ29udGFpbmVyOmZpcnN0JykuYXR0cignY2xhc3MnKS5yZXBsYWNlKCdKaW5hQ29udGFpbmVyICcsICcnKS5zcGxpdCgnICcpLm1hcChzID0+IChzLnN1YnN0cigwLCA1KSA9PSAnSmluYV8nID8gJy4nK3MgOiAnJykpLmpvaW4oJywnKS5yZXBsYWNlKC8sJC8sICcnKTtcbiAgICAgICAgICAgICQodGhpcykuZHJhZ2dhYmxlKHtcbiAgICAgICAgICAgICAgICBoYW5kbGU6ICc+LkppbmFDb21wb25lbnRNYW5hZ2VyID4uSmluYUNvbXBvbmVudE1hbmFnZXJNZW51ID5kaXYgPi5KaW5hQ29tcG9uZW50SGFuZGxlJyxcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdtb3ZlJyxcbiAgICAgICAgICAgICAgICB0b2xlcmFuY2U6ICdwb2ludGVyJyxcbiAgICAgICAgICAgICAgICBjb25uZWN0VG9Tb3J0YWJsZTogY2xhc3NlcyxcbiAgICAgICAgICAgICAgICByZXZlcnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcmV2ZXJ0RHVyYXRpb246IDEwMCxcbiAgICAgICAgICAgICAgICBoZWxwZXI6ICdjbG9uZScsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIChldmVudCwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLkppbmFDb21wb25lbnRNYW5hZ2VyJykuYWRkQ2xhc3MoJ3VudmlzaWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCd1bnZpc2libGUnKTtcbiAgICAgICAgICAgICAgICAgICAgZHJhZ2dlZCA9ICQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLypuZXh0ID0gZHJhZ2dlZC5uZXh0KCcuSmluYUNvbXBvbmVudCcpXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGRyYWdnZWQucGFyZW50cygnLkppbmFDb21wb25lbnQ6Zmlyc3QnKVxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSAkKHRoaXMpLnBhcmVudHMoJy5KaW5hQ29udGFpbmVyOmZpcnN0JykqL1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRvQ29sdW1uc0RyYWdnYWJsZSgpO1xuICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuZG9Db2x1bW5zRHJhZ2dhYmxlKClcbiAgICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5kb0NvbHVtbnNEcmFnZ2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgJCgnIycrdGhhdC5jb21wb25lbnRJZCsnIC5KaW5hQ29sdW1uSGFuZGxlLnVpLWRyYWdnYWJsZScpLmRyYWdnYWJsZSgnZGVzdHJveScpO1xuICAgICAgICAkKCcjJyt0aGF0LmNvbXBvbmVudElkKycgLkppbmFDb2x1bW5IYW5kbGUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFR5cGUob2JqKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJsb2MgPSB0aGF0LmZpbmRDb21wb25lbnRCeUlkKHRoYXQucm9vdCwgb2JqLnBhcmVudHMoJy5KaW5hX0Jsb2M6Zmlyc3QnKS5hdHRyKCdpZCcpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmxvYy52YWx1ZXNbdGhhdC5kZWZhdWx0TG5nXS50eXBlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEJvb3RzdHJhcENsYXNzKHcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IHdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBiY2xhc3MgPSAnJztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIGJvb3RzdHJhcF9zdGVwcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnModyAtIGJvb3RzdHJhcF9zdGVwc1trXSkgPCBkaWZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gTWF0aC5hYnModyAtIGJvb3RzdHJhcF9zdGVwc1trXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiY2xhc3MgPSBrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJjbGFzc1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVCb290c3RyYXBDbGFzcyhvYmopIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IG9iai5hdHRyKFwiY2xhc3NcIikuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICB2YXIgciA9IC9jb2wtbWQtWzAtOV0rJC87XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc2VzW2ldLm1hdGNoKHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucmVtb3ZlQ2xhc3MoY2xhc3Nlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xhc3Nlc1tpXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcHJldmlvdXMgPSAkKHRoaXMpLnBhcmVudCgpLnByZXYoJy5KaW5hX0NvbHVtbicpO1xuICAgICAgICAgICAgdmFyIHgxID0gMjA7XG4gICAgICAgICAgICB2YXIgeDIgPSAkKHRoaXMpLnBhcmVudCgpLm9mZnNldCgpLmxlZnQgKyAkKHRoaXMpLnBhcmVudCgpLndpZHRoKCkgLSAyMDtcbiAgICAgICAgICAgIGlmIChwcmV2aW91cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgeDEgKz0gcHJldmlvdXMub2Zmc2V0KCkubGVmdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHdpZHRoID0gJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnRzKCcuSmluYUNvbXBvbmVudENvbnRlbnQ6Zmlyc3QnKS53aWR0aCgpO1xuICAgICAgICAgICAgdmFyIGJvb3RzdHJhcF9zdGVwcyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMTI7IGkrKykge1xuICAgICAgICAgICAgICAgIGJvb3RzdHJhcF9zdGVwc1tpXSA9ICgod2lkdGggLyAxMikgKiBpKSAtIDMwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkKHRoaXMpLmRyYWdnYWJsZSh7XG4gICAgICAgICAgICAgICAgYXhpczogJ3gnLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5tZW50OiBbeDEsIDAsIHgyLCA1MDAwXSxcbiAgICAgICAgICAgICAgICBzdG9wOiBmdW5jdGlvbiAoZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gZ2V0VHlwZSh1aS5oZWxwZXIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeDEgPSAkKHRoaXMpLnBhcmVudCgpLm9mZnNldCgpLmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4MiA9IHVpLmhlbHBlci5vZmZzZXQoKS5sZWZ0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSAkKHRoaXMpLnBhcmVudCgpLnByZXYoJy5KaW5hX0NvbHVtbicpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdzEgPSBvdGhlci53aWR0aCgpIC0gKHgxIC0geDIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdzIgPSAkKHRoaXMpLnBhcmVudCgpLndpZHRoKCkgKyAoeDEgLSB4Mik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb3RoZXIgPSB0aGF0LmZpbmRDb21wb25lbnRCeUlkKHRoYXQucm9vdCwgb3RoZXIuYXR0cignaWQnKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdGhpcyA9IHRoYXQuZmluZENvbXBvbmVudEJ5SWQodGhhdC5yb290LCAkKHRoaXMpLnBhcmVudCgpLmF0dHIoJ2lkJykpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3B4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlci53aWR0aCh3MSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS53aWR0aCh3Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb3RoZXIuYXR0cmlidXRlcy5zdHlsZSkgY290aGVyLmF0dHJpYnV0ZXMuc3R5bGUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3RoZXIuYXR0cmlidXRlcy5zdHlsZS53aWR0aCA9IHcxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3RoaXMuYXR0cmlidXRlcy5zdHlsZSkgY3RoaXMuYXR0cmlidXRlcy5zdHlsZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0aGlzLmF0dHJpYnV0ZXMuc3R5bGUud2lkdGggPSB3MjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BjJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVCb290c3RyYXBDbGFzcygkKHRoaXMpLnBhcmVudCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVCb290c3RyYXBDbGFzcyhvdGhlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdzEgPSAoTWF0aC5yb3VuZCh3MSAqIDEwMDAwMDAgLyB3aWR0aCkgLyAxMDAwMCkgKyAnJSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIud2lkdGgodzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcyID0gKHcyICogMTAwIC8gd2lkdGgpICsgJyUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkud2lkdGgodzIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY290aGVyLmF0dHJpYnV0ZXMuc3R5bGUpIGNvdGhlci5hdHRyaWJ1dGVzLnN0eWxlID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY290aGVyLmF0dHJpYnV0ZXMuc3R5bGUud2lkdGggPSB3MTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWN0aGlzLmF0dHJpYnV0ZXMuc3R5bGUpIGN0aGlzLmF0dHJpYnV0ZXMuc3R5bGUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdGhpcy5hdHRyaWJ1dGVzLnN0eWxlLndpZHRoID0gdzI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib290c3RyYXAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleF9jbGFzcyA9IHJlbW92ZUJvb3RzdHJhcENsYXNzKCQodGhpcykucGFyZW50KCkpLnJlcGxhY2UoL2NvbC1tZC0vLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4X2NsYXNzX290aGVyID0gcmVtb3ZlQm9vdHN0cmFwQ2xhc3Mob3RoZXIpLnJlcGxhY2UoL2NvbC1tZC0vLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld19jbGFzcyA9IGdldEJvb3RzdHJhcENsYXNzKHcyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3X2NsYXNzIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfY2xhc3MrK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3X2NsYXNzX290aGVyID0gTnVtYmVyKGV4X2NsYXNzX290aGVyKSArIE51bWJlcihleF9jbGFzcykgLSBOdW1iZXIobmV3X2NsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3X2NsYXNzX290aGVyIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfY2xhc3MtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X2NsYXNzX290aGVyKytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygnY29sLW1kLScgKyBuZXdfY2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyLmFkZENsYXNzKCdjb2wtbWQtJyArIG5ld19jbGFzc19vdGhlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RoaXMuY2xhc3NlcyA9IGN0aGlzLmNsYXNzZXMucmVwbGFjZSgvY29sLW1kLVswLTldKy8sICcnKSArICcgY29sLW1kLScgKyBuZXdfY2xhc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY290aGVyLmNsYXNzZXMgPSBjb3RoZXIuY2xhc3Nlcy5yZXBsYWNlKC9jb2wtbWQtWzAtOV0rLywgJycpICsgJyBjb2wtbWQtJyArIG5ld19jbGFzc19vdGhlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB1aS5oZWxwZXIuY3NzKCdsZWZ0JywgJzBweCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMuc2hvd0xpYnJhcnkgPSBmdW5jdGlvbiAoY29tcG9uZW50LCBhZnRlcikge1xuICAgICAgICAkKCcuSmluYUNvbXBvbmVudE1hbmFnZXInKS5yZW1vdmVDbGFzcygndmlzaWJsZScpXG4gICAgICAgIEppbmFDTVMubGlicmFyeS4kZGF0YS5tYW5hZ2VyID0gdGhpc1xuICAgICAgICBKaW5hQ01TLmxpYnJhcnkuJGRhdGEuY29tcG9uZW50ID0gY29tcG9uZW50XG4gICAgICAgIEppbmFDTVMubGlicmFyeS4kZGF0YS5hZnRlciA9IGFmdGVyXG4gICAgICAgIHZhciBjbGFzc2VzID0gdGhpcy5nZXRTaWJsaW5nQ2FuZGlkYXRlcyhjb21wb25lbnQpXG4gICAgICAgIEppbmFDTVMubGlicmFyeS4kZGF0YS5jbGFzc2VzID0gY2xhc3Nlc1xuICAgICAgICBKaW5hQ01TLmxpYnJhcnkuc2V0RmlsdGVyKClcbiAgICAgICAgJCgnI0ppbmFMaWJyYXJ5JykuZGlhbG9nKHtcbiAgICAgICAgICAgIG1vZGFsOiB0cnVlLFxuICAgICAgICAgICAgdGl0bGU6ICdBam91dGVyIHVuIGNvbXBvc2FudCcsXG4gICAgICAgICAgICB3aWR0aDogJzgwMCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICc2MDAnLFxuICAgICAgICAgICAgc2hvdzoge2VmZmVjdDogXCJibGluZFwiLCBkdXJhdGlvbjogODAwfVxuICAgICAgICB9KVxuICAgIH1cbn07XG4iLCJWdWUuY29tcG9uZW50KCdqaW5hcG9wdXAnLCB7XG4gICAgdGVtcGxhdGU6ICcjamluYXBvcHVwLXRlbXBsYXRlJyxcbiAgICBwcm9wczoge2NvbXBvbmVudDogT2JqZWN0LCBpbnN0YW5jZTogT2JqZWN0LCB2YWx1ZXM6IE9iamVjdCwgbG5nOiBTdHJpbmcsIGRlZmF1bHRsbmc6IFN0cmluZywgbG5nbGlzdDogT2JqZWN0LCBjdXJyZW50b25nbGV0OiBOdW1iZXJ9LFxuICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVwbG9hZGluZzogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBmaWVsZEFjdGlvbjogZnVuY3Rpb24oY29kZSkge1xuICAgICAgICAgICAgJCgnIycrY29kZSsnX2FjdGlvbnMnKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAkKCcjJytjb2RlKydfYWN0aW9uc19wb3B1cCcpLmRpYWxvZyh7bW9kYWw6IHRydWUsIHRpdGxlOiAnUHLDqWbDqXJlbmNlcyBkdSBjaGFtcCcsIHNob3c6IHtlZmZlY3Q6IFwiYmxpbmRcIiwgZHVyYXRpb246IDQwMH0sXG4gICAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCl7JCgnLkppbmFQb3B1cEZpZWxkQWN0aW9uJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpfX0pO1xuICAgICAgICB9LFxuICAgICAgICBvbmdsZXRIYW5kbGU6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICB0aGlzLiRwYXJlbnQuJGRhdGEuY3VycmVudG9uZ2xldCA9IGlkXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25Ub2dnbGU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5uZXh0KCkudG9nZ2xlQ2xhc3MoJ2Nsb3NlZCcpO1xuICAgICAgICB9LFxuICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKCcjSmluYVBvcHVwJykuZGlhbG9nKCdjbG9zZScpXG4gICAgICAgIH0sXG4gICAgICAgIGdldFRpbnltY2VWYWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgJCgnI0ppbmFQb3B1cCAucmljaHRleHQnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9ICQodGhpcykuYXR0cignaWQnKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgICAgIHRoYXQudmFsdWVzW3BhcnRzWzBdXVtwYXJ0c1sxXV0gPSB0aW55TUNFLmdldCgkKHRoaXMpLmF0dHIoJ2lkJykpLmdldENvbnRlbnQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzYXZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0VGlueW1jZVZhbHVlcygpO1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS52YWx1ZXMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy52YWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9LFxuICAgICAgICBzd2l0Y2hMbmc6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0VGlueW1jZVZhbHVlcygpO1xuICAgICAgICAgICAgSmluYUNNUy5yZW1vdmVUaW55bWNlKCk7XG4gICAgICAgICAgICB2YXIgbG5nID0gJChlLnRhcmdldCkuZGF0YSgnbG5nJyk7XG4gICAgICAgICAgICBpZiAoIXRoaXMudmFsdWVzW2xuZ10pIHRoaXMudmFsdWVzW2xuZ10gPSB7fTtcbiAgICAgICAgICAgIHRoaXMuJHBhcmVudC4kZGF0YS5sbmcgPSBsbmdcbiAgICAgICAgfSxcbiAgICAgICAgZHJvcEZpbGU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gZS5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgICAgJCh0LmNoaWxkcmVuWzBdKS5jbGljaygpXG4gICAgICAgIH0sXG4gICAgICAgIGdldERyb3BwZWQ6IGZ1bmN0aW9uKGUsIGxuZywgY29kZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdmFyIHQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgICAkKHQpLnJlbW92ZUNsYXNzKCdvdmVyJyk7XG4gICAgICAgICAgICB0LmNoaWxkcmVuWzBdLmZpbGVzID0gZS5kYXRhVHJhbnNmZXIuZmlsZXM7XG4gICAgICAgICAgICB0aGlzLmFmdGVyQ2hhbmdlKHQuY2hpbGRyZW5bMF0sIGxuZywgY29kZSlcbiAgICAgICAgfSxcbiAgICAgICAgY2hhbmdlRmlsZTogZnVuY3Rpb24oZSwgbG5nLCBjb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmFmdGVyQ2hhbmdlKGUudGFyZ2V0LCBsbmcsIGNvZGUpXG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZUZpbGU6IGZ1bmN0aW9uKGUsIGxuZywgY29kZSwgc3ViLCBkb2MpIHtcbiAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAkLmVhY2godGhpcy52YWx1ZXNbbG5nXVtjb2RlXVtzdWJdLCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPT0gZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQudmFsdWVzW2xuZ11bY29kZV1bc3ViXS5zcGxpY2UoaywgMSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuJGZvcmNlVXBkYXRlKClcbiAgICAgICAgfSxcbiAgICAgICAgYWZ0ZXJDaGFuZ2U6IGZ1bmN0aW9uKG5vZGUsIGxuZywgY29kZSkge1xuICAgICAgICAgICAgaWYgKCFub2RlLmZpbGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgJC5lYWNoKG5vZGUuZmlsZXMsIGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnZhbHVlc1tsbmddW2NvZGVdWydkb2NzJ10ucHVzaCh2KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLiRmb3JjZVVwZGF0ZSgpXG4gICAgICAgIH0sXG4gICAgICAgIGlzSW1hZ2U6IGZ1bmN0aW9uKGRvYykge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBkb2MudHlwZS5yZXBsYWNlKC8oLio/KVxcLyguKikvLCBcIiQxXCIpO1xuICAgICAgICAgICAgcmV0dXJuICh0eXBlID09ICdpbWFnZScpXG4gICAgICAgIH0sXG4gICAgICAgIGdldERvY1VSTDogZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgICByZXR1cm4gSmluYUNNUy5nZXREb2NVUkwoZG9jKVxuICAgICAgICB9LFxuICAgICAgICBkcmFnT3ZlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIH0sXG4gICAgICAgIGRyYWdFbnRlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgJChlLnRhcmdldCkuYWRkQ2xhc3MoJ292ZXInKVxuICAgICAgICB9LFxuICAgICAgICBkcmFnRXhpdDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgJChlLnRhcmdldCkucmVtb3ZlQ2xhc3MoJ292ZXInKVxuICAgICAgICB9LFxuICAgICAgICBnZXRGaWVsZFZhbHVlOiBmdW5jdGlvbihsbmcsIGNvZGUsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudmFsdWVzW2xuZ11bY29kZV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc1tsbmddW2NvZGVdID0ge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy52YWx1ZXNbbG5nXVtjb2RlXVt2YWx1ZV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc1tsbmddW2NvZGVdW3ZhbHVlXSA9IFtdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbbG5nXVtjb2RlXVt2YWx1ZV1cbiAgICAgICAgfSxcbiAgICAgICAgc3VibWl0RmlsZXM6IGZ1bmN0aW9uIChldmVudCwgbG5nLCBjb2RlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4kZGF0YS51cGxvYWRpbmcpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuJGRhdGEudXBsb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBkb2NzID0gdGhpcy5nZXRGaWVsZFZhbHVlKGxuZywgY29kZSwgJ2RvY3MnKTtcbiAgICAgICAgICAgIGlmIChkb2NzLmxlbmd0aCA9PSAwKSByZXR1cm47XG4gICAgICAgICAgICB2YXIgZmRhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgICQuZWFjaChkb2NzLCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgICAgICAgZmRhdGEuYXBwZW5kKGssIHYpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxuICAgICAgICAgICAgICAgIHVybDogSmluYUNNUy5wYXRoICsgJ2FwcC9hY3Rpb24vdXBsb2FkLycsXG4gICAgICAgICAgICAgICAgZGF0YTogZmRhdGEsXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB4aHI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5maW5kKCcuamF1Z2UnKS5jc3MoJ3dpZHRoJywgJ2NhbGMoJysoZS5sb2FkZWQgLyBlLnRvdGFsKSoxMDArJyUgLSAyMHB4KScpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geGhyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZmxvdykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gSlNPTi5wYXJzZShmbG93KTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5hZGREb2N1bWVudHMobG5nLCBjb2RlLCBvYmoudXBsb2FkZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmbG93KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LiRkYXRhLnVwbG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkuZmluZCgnLmphdWdlJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIGFkZERvY3VtZW50czogZnVuY3Rpb24gKGxuZywgY29kZSwgZG9jdW1lbnRzLCByYXopIHtcbiAgICAgICAgICAgIGlmICghdGhpcy52YWx1ZXNbbG5nXVtjb2RlXVsnZG9jdW1lbnRzJ10pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc1tsbmddW2NvZGVdLmRvY3VtZW50cyA9IFtdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAkLmVhY2goZG9jdW1lbnRzLCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgICAgICAgdmFyIGV4aXN0cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICQuZWFjaCh0aGF0LnZhbHVlc1tsbmddW2NvZGVdLmRvY3VtZW50cywgZnVuY3Rpb24oa2ssIHZ2KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2dlsnZm9sZGVyJ10gPT0gdlsnZm9sZGVyJ10gJiYgdnZbJ25hbWUnXSA9PSB2WyduYW1lJ10pIGV4aXN0cyA9IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIWV4aXN0cykgdGhhdC52YWx1ZXNbbG5nXVtjb2RlXS5kb2N1bWVudHMucHVzaCh2KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmF6KSB0aGlzLnZhbHVlc1tsbmddW2NvZGVdWydkb2NzJ10gPSBbXTtcbiAgICAgICAgICAgIHRoaXMuJGZvcmNlVXBkYXRlKClcbiAgICAgICAgfVxuICAgIH1cbn0pXG5leHBvcnQgZnVuY3Rpb24gc2V0UG9wdXAocGFyYW1zKSB7XG4gICAgcmV0dXJuIG5ldyBWdWUoe1xuICAgICAgICBlbDogJyNKaW5hUG9wdXAnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjb21wb25lbnQ6IHt9LFxuICAgICAgICAgICAgaW5zdGFuY2U6IHt9LFxuICAgICAgICAgICAgdmFsdWVzOiB7fSxcbiAgICAgICAgICAgIGxuZzogcGFyYW1zLmxuZyxcbiAgICAgICAgICAgIGRlZmF1bHRsbmc6IHBhcmFtcy5kZWZhdWx0TG5nLFxuICAgICAgICAgICAgY3VycmVudG9uZ2xldDogMCxcbiAgICAgICAgICAgIGxuZ2xpc3Q6IHtmcjogJ2ZyLnBuZycsIGVuOiAnZW4ucG5nJywgZXM6ICdlcy5wbmcnLCBkZTogJ2RlLnBuZycsIGl0OiAnaXQucG5nJ31cbiAgICAgICAgfSxcbiAgICAgICAgYmVmb3JlVXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJGRhdGEudmFsdWVzW3RoaXMuJGRhdGEubG5nXSkgdGhpcy4kZGF0YS52YWx1ZXNbdGhpcy4kZGF0YS5sbmddID0ge31cbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGlueW1jZS5pbml0KHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJyNKaW5hUG9wdXAgLnJpY2h0ZXh0JyxcbiAgICAgICAgICAgICAgICB0aGVtZTogXCJtb2Rlcm5cIixcbiAgICAgICAgICAgICAgICBzY2hlbWE6IFwiaHRtbDVcIixcbiAgICAgICAgICAgICAgICBpbmxpbmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBsdWdpbnM6ICd0ZXh0Y29sb3IgcGFzdGUgbGluayBjb2RlJyxcbiAgICAgICAgICAgICAgICBmb250c2l6ZV9mb3JtYXRzOiAnMTRwdCAxNnB0JyxcbiAgICAgICAgICAgICAgICAvKmNvbnRlbnRfY3NzOiAndGVtcGxhdGVzL2Nzcy9oLWZyb250LmNzcycsKi9cbiAgICAgICAgICAgICAgICBibG9ja19mb3JtYXRzOiAnUGFyYWdyYXBoPWRpdicsXG4gICAgICAgICAgICAgICAgc3R5bGVfZm9ybWF0czogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ01vbiBmb3JtYXQnLCBpdGVtczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aXRsZTogJ0dyYXMnLCBmb3JtYXQ6ICdib2xkJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RpdGxlOiAnR3JhbmQgdGV4dGUnLCBpbmxpbmU6ICdzcGFuJywgY2xhc3NlczogJ2JpZyd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBzdHlsZV9mb3JtYXRzX21lcmdlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlOiAnZnJfRlInLFxuICAgICAgICAgICAgICAgIC8qdG9vbGJhcjogXCJ1bmRvIHJlZG8gfCBzdHlsZXNlbGVjdCB8IGZvbnRzaXplc2VsZWN0IHwgYm9sZCBpdGFsaWMgdW5kZXJsaW5lIHwgYnVsbGlzdCBudW1saXN0IHwgZm9yZWNvbG9yIGJhY2tjb2xvciB8IGFsaWdubGVmdCBhbGlnbmNlbnRlciBhbGlnbnJpZ2h0IGFsaWduanVzdGlmeVwiLCovXG4gICAgICAgICAgICAgICAgdG9vbGJhcjogXCJ1bmRvIHJlZG8gfCBzdHlsZXNlbGVjdCB8IGZvbnRzaXplc2VsZWN0IHwgYm9sZCBpdGFsaWMgdW5kZXJsaW5lIHwgYnVsbGlzdCBudW1saXN0IHwgZm9yZWNvbG9yIGJhY2tjb2xvciB8IHN1YiBzdXAgYWxpZ25sZWZ0IGFsaWduY2VudGVyIGFsaWducmlnaHQgYWxpZ25qdXN0aWZ5IHwgbGluayB8IGNvZGVcIixcbiAgICAgICAgICAgICAgICBzdGF0dXNiYXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lbnViYXI6IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuIiwiVnVlLmNvbXBvbmVudCgnbGlicmFyeScsICB7XG4gICAgdGVtcGxhdGU6ICcjamluYWxpYnJhcnktdGVtcGxhdGUnLFxuICAgIHByb3BzOiB7XG4gICAgICAgIG5vZGU6IE9iamVjdCxcbiAgICAgICAgY29tcG9uZW50OiBPYmplY3QsXG4gICAgICAgIG1hbmFnZXI6IE9iamVjdCxcbiAgICAgICAgYWZ0ZXI6IDBcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbihldmVudCwgbm9kZSwgbWFuYWdlciwgY29tcG9uZW50LCBhZnRlcikge1xuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBpZiAobm9kZS50eXBlID09ICdmb2xkZXInKSByZXR1cm47XG4gICAgICAgICAgICBtYW5hZ2VyLmluc2VydENvbXBvbmVudChudWxsLCBjb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICBpZDogJzgnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdBcnRpY2xlIDgnLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ0ppbmFfQXJ0aWNsZScsXG4gICAgICAgICAgICAgICAgLyp0YWc6ICdqaW5hYXJ0aWNsZScsKi9cbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB7ZnI6IHt0aXRsZTogJ01vbiB0aXRyZSA4JywgY29ycHM6ICdDb3JwcyBkZSBtb24gPGIgY2xhc3M9XCJ0ZXN0XCI+am9saTwvYj4gYXJ0aWNsZSd9LCBlbjoge2NvcnBzOiAnTXkgYmVhdXRpZnVsIGFydGljbGUnfX1cbiAgICAgICAgICAgIH0sIGFmdGVyLCB0cnVlKTtcbiAgICAgICAgICAgICQoJyNKaW5hTGlicmFyeScpLmRpYWxvZygnY2xvc2UnKVxuICAgICAgICB9XG4gICAgfVxufSlcbmV4cG9ydCBmdW5jdGlvbiBzZXRMaWJyYXJ5KHBhcmFtcykge1xuICAgIHJldHVybiBuZXcgVnVlKHtcbiAgICAgICAgZWw6ICcjSmluYUxpYnJhcnknLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uOiBwYXJhbXMuY29sbGVjdGlvbixcbiAgICAgICAgICAgIG1hbmFnZXI6IHt9LFxuICAgICAgICAgICAgY29tcG9uZW50OiB7fSxcbiAgICAgICAgICAgIGFmdGVyOiAwLFxuICAgICAgICAgICAgY2xhc3NlczogW10sXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZHM6IHtcbiAgICAgICAgICAgIHNldEZpbHRlcjogZnVuY3Rpb24gKGNsYXNzZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NlcykgdGhpcy5jbGFzc2VzID0gY2xhc3NlcztcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF2YWlsYWJsZSh0aGlzLmNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICAgIC8vdGhpcy4kZm9yY2VVcGRhdGUoKVxuICAgICAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb2xsZWN0aW9uKSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRBdmFpbGFibGU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PSAnZm9sZGVyJykge1xuICAgICAgICAgICAgICAgICAgICBub2RlLmF2YWlsYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgY2hpbGQgaW4gbm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldEF2YWlsYWJsZShub2RlLmNoaWxkcmVuW2NoaWxkXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hdmFpbGFibGUgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xhc3Nlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hdmFpbGFibGUgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmF2YWlsYWJsZSA9IHRoaXMuY2xhc3Nlcy5pbmRleE9mKG5vZGUuY2xhc3NOYW1lKSA+PSAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuYXZhaWxhYmxlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q29tcG9uZW50OiBmdW5jdGlvbiAoY2xhc3NOYW1lLCBub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkgbm9kZSA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHJldHVybjtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gJyc7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgY2hpbGQgaW4gbm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbltjaGlsZF0uY2xhc3NOYW1lID09IGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuY2hpbGRyZW5bY2hpbGRdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuZ2V0Q29tcG9uZW50KGNsYXNzTmFtZSwgbm9kZS5jaGlsZHJlbltjaGlsZF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmV0KSByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG59XG4iLCJpbXBvcnQge0ppbmFNYW5hZ2VyfSBmcm9tICcuL21hbmFnZXIuanMnXG5pbXBvcnQge3NldFBvcHVwfSBmcm9tIFwiLi9wb3B1cC5qc1wiO1xuaW1wb3J0IHtzZXRMaWJyYXJ5fSBmcm9tIFwiLi9saWJyYXJ5LmpzXCI7XG5cbmV4cG9ydCBjb25zdCBKaW5hQ01TID0ge1xuICBpbml0OiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgdGhpcy5tYW5hZ2VycyA9IFtdXG4gICAgdGhpcy5wYXRoID0gcGFyYW1zLnBhdGhcbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtc1xuICAgIGlmICghdGhpcy5wYXJhbXMubG5nKSB0aGlzLnBhcmFtcy5sbmcgPSBwYXJhbXMuZGVmYXVsdExuZ1xuICAgIHRoaXMuY29sbGVjdGlvbiA9IHBhcmFtcy5jb2xsZWN0aW9uXG4gICAgdGhpcy5jb250YWluZXJzID0gcGFyYW1zLmNvbnRhaW5lcnNcbiAgICB0aGlzLmNvbXBvbmVudHMgPSBwYXJhbXMuY29tcG9uZW50c1xuICAgIHRoaXMuZGVmYXVsdExuZyA9IHBhcmFtcy5kZWZhdWx0TG5nXG4gICAgdGhpcy5tYXhIaXN0b3J5ID0gcGFyYW1zLm1heEhpc3RvcnlcbiAgICBpZiAoIXBhcmFtcy5hZG1pbikgcmV0dXJuXG4gICAgdGhpcy5wb3B1cCA9IHNldFBvcHVwKHBhcmFtcylcbiAgICB0aGlzLmxpYnJhcnkgPSBzZXRMaWJyYXJ5KHRoaXMucGFyYW1zKVxuICB9LFxuICByZW1vdmVUaW55bWNlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVkaXRvcnMgPSB0aW55bWNlLmdldCgpO1xuICAgIGZvciAodmFyIGkgPSBlZGl0b3JzLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgICBlZGl0b3JzW2ldLmRlc3Ryb3koKVxuICAgIH1cbiAgfSxcbiAgZ2V0RG9jVVJMOiBmdW5jdGlvbiAoZG9jKSB7XG4gICAgcmV0dXJuIHRoaXMucGF0aCArICd1cGxvYWQvJyArIGRvYy5mb2xkZXIgKyAnLycgKyBkb2MubmFtZVxuICB9LFxuICBkaXNwbGF5OiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgdmFyIG1hbmFnZXIgPSBuZXcgSmluYU1hbmFnZXIocGFyYW1zLCB0aGlzLnBhcmFtcylcbiAgICBtYW5hZ2VyLnZ1ZSA9IG5ldyBWdWUoe1xuICAgICAgZWw6ICcjJyArIHBhcmFtcy5jb21wb25lbnRJZCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgY29tcG9uZW50OiBwYXJhbXMuY29tcG9uZW50LFxuICAgICAgICB2YWx1ZXM6IHBhcmFtcy52YWx1ZXMsXG4gICAgICAgIG1hbmFnZXI6IG1hbmFnZXIsXG4gICAgICAgIGNpbmRleDogMCxcbiAgICAgIH0sXG4gICAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChKaW5hQ01TLnBhcmFtcy5hZG1pbikgdGhpcy5tYW5hZ2VyLmRvU29ydGFibGUoKVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5tYW5hZ2Vycy5wdXNoKG1hbmFnZXIpXG4gIH0sXG4gIGdldFJvb3Q6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciByb290XG4gICAgdmFyIF9pZCA9IGlkLnJlcGxhY2UoL0ppbmEtLywgJycpXG4gICAgdmFyIHBhcnRzID0gX2lkLnNwbGl0KCdfJylcbiAgICB2YXIgcm9vdF9pZCA9IHBhcnRzWzBdXG4gICAgJC5lYWNoKHRoaXMubWFuYWdlcnMsIGZ1bmN0aW9uKGssIG1hbmFnZXIpIHtcbiAgICAgIGlmIChtYW5hZ2VyLnJvb3QuaWQgPT0gcm9vdF9pZCkgcm9vdCA9IG1hbmFnZXIucm9vdFxuICAgIH0pXG4gICAgcmV0dXJuIHJvb3RcbiAgfVxufSIsImltcG9ydCB7SmluYUNNU30gZnJvbSAnLi9qaW5hLmpzJ1xuZXhwb3J0IHtKaW5hQ01TfVxuLy8gQnVnIHRvb2xzIFRpbnlNQ0VcbiQoZG9jdW1lbnQpLm9uKCdmb2N1c2luJywgZnVuY3Rpb24oZSkge1xuICAgIGlmICgkKGUudGFyZ2V0KS5jbG9zZXN0KFwiLm1jZS13aW5kb3dcIikubGVuZ3RoKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxufSlcbiJdLCJzb3VyY2VSb290IjoiIn0=